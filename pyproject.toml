[tool.poetry]
name = "heart-library"
version = "0.5.0"
description = "Hardened Extension of the Adversarial Robustness Toolbox (HEART) supports assessment of adversarial AI vulnerabilities in Test & Evaluation workflows."
readme = "README.md"
license = "MIT"
repository = "https://github.com/IBM/heart-library"
packages = [{include = "heart_library", from = "src" }]
keywords = [
    "machine learning",
    "adversarial ai",
    "evasion",
]

authors = ["Mark Baker, Jordan Fischer, Kieran Fraser, Jackson Lee, Adam Lockwood, Stekunda Henry"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.setuptools.package-data]
heart_library = ["py.typed"]


# HEART Required Dependencies ----------------------------------------------------[tool.poetry.dependencies (required)]

[tool.poetry.dependencies]

python = ">=3.9, <3.12"
adversarial-robustness-toolbox = ">=1.17.1, <1.19.0"    # GitLab issue 561
maite = ">=0.7.0"
numpy = ">=1.18.5, <2"
scikit-learn = ">=0.22.2"
six = "^1"
setuptools = "^75"
tqdm = "^4"


# HEART Optional Dependencies ----------------------------------------------------[tool.poetry.dependencies (optional)]

datasets = { version = ">=2.18.0", optional = true }
furo = { version = "^2024", optional = true }
GPUtil = { version = "^1", optional = true }
jupyter = { version = "^1", optional = true}
kornia = { version = ">=0.7.3", optional = true }
matplotlib = { version = "^3", optional = true }
memory-profiler = { version = ">=0.61.0", optional = true }
multiprocess = { version = ">=0.70.0", optional = true }
myst-parser = { version = "^3", optional = true }
numba = { version = ">=0.50.0", optional = true }
opencv-python = { version = "^4", optional = true }
pandas = { version = "^2", optional = true }
Pillow = { version = "^10", optional = true }
pycocotools = { version = "^2", optional = true }
pympler = { version = "^1", optional = true }
sphinx = { version = ">=4.2.0", optional = true }
sphinx-charts = { version = ">=0.2.1", optional = true }
sphinx-design = { version = ">=0.6.1", optional = true }
torch = { version = "<=2.3.1", optional = true }                        # https://github.com/IBM/heart-library/issues/1
torchvision = { version = ">=0.18.0", optional = true }
timm = { version = "^1", optional = true }
transformers = { version = "^4", optional = true }
torchmetrics = { version = "^1", optional = true }

# yolov5 with compatibility workarounds
# https://github.com/fcakyon/yolov5-pip/discussions/256
huggingface_hub = { version = "<0.25.0", optional = true }
yolov5 = { version = ">=7.0.13", optional = true, markers = "python_version >= '3.10'" }


# HEART Optional Dependency Groups ----------------------------------------------------------------[tool.poetry.extras]

[tool.poetry.extras]

# All Optional Dependencies

all = [
    "datasets",
    "jupyter",
    "kornia",
    "matplotlib",
    "multiprocess",
    "numba",
    "pandas",
    "Pillow",
    "pycocotools",
    "torch",
    "torchvision",
    "opencv-python",
    "timm",
    "transformers",
    "torchmetrics",
    "yolov5",
    "huggingface_hub",
]


# Optional Individual Framework Dependencies

pytorch = [
    "torch",
    "torchvision",
    "torchmetrics"
]


# Optional Non-Framework Dependencies

non_framework = [
    "datasets",
    "jupyter",
    "kornia",
    "matplotlib",
    "multiprocess",
    "numba",
    "pandas",
    "Pillow",
    "pycocotools",
    "opencv-python",
    "timm",
    "transformers",
]


# Optional Image Classification Dependencies

image_classification = [
    "torch",
    "torchvision",
    "transformers",
]


# Optional Object Detection Dependencies

object_detection = [
    "torch",
    "opencv-python",
    "pycocotools",
    "yolov5",
    "huggingface_hub",
]


# Optional Jupyter Notebook Dependencies

notebooks = [
    "datasets",
    "jupyter",
    "kornia",
    "matplotlib",
    "pandas",
]


# Optional Sphinx Dependencies

docs = [
    "furo",
    "myst-parser",
    "sphinx",
    "sphinx-charts",
    "sphinx-design",
]


# Optional Script Dependencies

script = [
    "memory-profiler",
    "pympler",
    "GPUtil",
]


# HEART Dev Dependencies/Configurations---------------------------------------------------------[tool.poetry.group.dev]

[tool.poetry.group.dev]
optional = true


[tool.poetry.group.dev.dependencies]
nbmake = "^1"
pre-commit = "^3"
prettytable = "^3"
pytest = "^8"
pytest-mock = "^3"
pytest-cov = "^6"
pyright = "^1"
ruff = ">=0.8.0"


[tool.pytest.ini_options]
addopts = "-vvv --cov=heart_library --cov-config=pyproject.toml --cov-report term"
testpaths = [
    "tests",
]
markers = [
    "skip_framework: marks a test to be skipped for specific framework values. Valid values are ('tensorflow' 'keras' 'mxnet' 'pytorch' 'scikitlearn')",
    "framework_agnostic: marks a test to be agnostic to frameworks and run only for one default framework",
    "skip_module: Skip the test if a module is not available in the current environment",
    "required: Unit tests marked required (with core dependencies only installed) based on documented program standards",
    "optional: Unit tests marked optional (with core and optional dependencies installed) based on documented program standards",
]


[tool.coverage.run]
omit = [
    "tests/*",
    "*/.cache/*",
    "conftest.py",
    "src/heart_library/config.py",
]


[tool.coverage.report]
exclude_also = [
    "if __name__ == '__main__':",      # Exclude the main block
    "pragma: no cover",                # Exclude lines with this pragma
    "raise NotImplementedError",       # Exclude lines raising NotImplementedError
    "raise AssertionError",            # Exclude lines raising AssertionError
]


[tool.pyright]
include = ["src/heart_library"]
stubPath = "typings/"


# Ruff rules - https://docs.astral.sh/ruff/rules/
[tool.ruff]
# Exclude content as appropriate.
exclude = [
  ".devcontainer",
  ".github",
  ".vscode",
  ".jupyter_cache",
  "*env*",
  "output",
  "_build",
  ".tox",
  "prototype",
]

line-length = 120  # feel free to change line length per line length guidelines (CR-2).
indent-width = 4

# Program Standards defined minimum supported python version
target-version = "py39"

extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = ["F", "E", "W", "C90", "I", "N", "D1", "D200", "D201", "D211", "D403", "D419", "UP",
          "YTT", "ANN", "S",  "BLE", "B", "A", "COM", "C4", "T10", "ISC", "ICN", "PYI", "PT", "Q",
          "RSE", "RET", "SLF", "SIM", "TID252", "ARG", "FIX", "PD", "FLY", "NPY", "RUF027",
          "RUF100", "PERF"]

ignore = ["ANN101","ANN102"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["heart-library"] # Change to say your package.

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 5

[tool.ruff.lint.pydocstyle]
# Choose from "google", "numpy", and "pep257"
# To properly use these you should use all of "D" instead of the selection from "D" in "select" above,
# by replacing those with "D". [See here for details.](https://docs.astral.sh/ruff/settings/#lintpydocstyle)
convention = "google"
